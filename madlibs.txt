/**
 * This program asks the user for a file, takes in that final and sets certain words into an arrayList and replaces them in another story file
 * 
 */
import java.util.Scanner;
import java.util.Random;
import java.io.File;
import java.util.ArrayList;
public class MadLibs {
	private static Random rnd = new Random();
	private static ArrayList<String> singNouns, singVerbs, pluNouns, pluVerbs, adjs, advs, pastVerbs;
	public static void main (String[] args) {
		boolean run = true;
		printWelcome();
		String storyNum;
		System.out.println("This program generates random stories using wordlists you supply.");
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter the name of the folder where the stories and wordlists are.");
		System.out.println("Or just press Enter to accept the default location: ");
		String folder = sc.nextLine();
		createWordList();
		loadWordLists(folder);
		ArrayList<String> story;
		while(run) {
			System.out.println("Enter a story number or q to quit: ");
			storyNum = sc.nextLine();
			story = readStory(folder, storyNum); 
			if((storyNum.equalsIgnoreCase("q"))) {
				run = false;
				System.out.println("Thank you for using this program");
			}try {
				if(storyNum.equals(null)){
					System.out.println("That story does not exist. Choose again");
				}else {
				System.out.println("Here is your madlib: ");
				tellStory(story);
				
			}
			}
			
			catch(Exception ex) {
			System.out.println("Could not continue");
			ex.printStackTrace();
			return;
			}
		}
	}
	/**
	 * prints welcome banner
	 */
	public static void printWelcome() {
		System.out.println("*".repeat(60));
		System.out.println("*" +" ".repeat(18) + "Welcome to Madlibs V1.0" + " ".repeat(18) + "*" );
		System.out.println("*".repeat(60));
	}
	/**
	 * creates arrayList
	 */
	public static void createWordList() {
		singNouns = new ArrayList<String>();
		singVerbs = new ArrayList<String>();
		pluNouns = new ArrayList<String>();
		pluVerbs = new ArrayList<String>();
		adjs = new ArrayList<String>();
		advs = new ArrayList<String>();
		pastVerbs = new ArrayList<String>();
	}
	/**
	 * this class loads the words from the file into the created arrayList
	 * @param folder that the user gives
	 * @return true or false if it worked
	 */
	public static boolean loadWordLists(String folder) {
		try {
		Scanner fsc = new Scanner(new File(folder + "singnoun.txt"));
		while(fsc.hasNextLine()) {
			singNouns.add(fsc.nextLine());
		}fsc.close();
		Scanner fsc1 = new Scanner(new File(folder +"singverb.txt"));
		while(fsc1.hasNextLine()) {
			singVerbs.add(fsc1.nextLine());
		}fsc1.close();
		Scanner fsc2 = new Scanner(new File(folder +"plunoun.txt"));
		while(fsc.hasNextLine()) {
			pluNouns.add(fsc2.nextLine());
		}fsc.close();
		Scanner fsc3 = new Scanner(new File(folder + "pluverb.txt"));
		while(fsc3.hasNextLine()) {
			pluVerbs.add(fsc.nextLine());
		}fsc.close();
		Scanner fsc4 = new Scanner(new File(folder + "adj.txt"));
		while(fsc4.hasNextLine()) {
			adjs.add(fsc.nextLine());
		}fsc.close();
		Scanner fsc5 = new Scanner(new File(folder + "adv.txt"));
		while(fsc.hasNextLine()) {
			advs.add(fsc5.nextLine());
		}fsc.close();
		Scanner fsc6 = new Scanner(new File(folder + "pastverb.txt"));
		while(fsc6.hasNextLine()) {
			pastVerbs.add(fsc.nextLine());
		}fsc.close();
	return true;
		}catch(Exception e) {
			return false;
	}
}
	/**
	 * this program looks through the file and where it sees things it needs to replace it takes a random word from one of the arrays
	 * @param story is teh story that was picked
	 */
	public static void tellStory(ArrayList<String> story){
	ArrayList<String> finalStory = new ArrayList<String>();
		for (String line : story) {
		String [] parts = line.split(" ");
		String filledInLine = "";
		for (int i = 0; i < parts.length; i++) {
			if (parts[i].equals("<singnoun>")) {
				parts[i] = singNouns.get(rnd.nextInt(singNouns.size()));
				filledInLine = filledInLine + " " + parts[i];
			}else {
				filledInLine = filledInLine + " " + parts[i];
			}
		}
		for (int i = 0; i < parts.length; i++) {
			if (parts[i].equals("<singverb>")) {
				parts[i]= singVerbs.get(rnd.nextInt(singVerbs.size()));
				filledInLine = filledInLine + " " + parts[i];
			}else {
				filledInLine = filledInLine + " " + parts[i];
			}
		}
		for (int i = 0; i < parts.length; i++) {
			if (parts[i].equals("<plunoun>")) {
				parts[i]= pluNouns.get(rnd.nextInt(pluNouns.size()));
				filledInLine = filledInLine + " " + parts[i];
			}else {
				filledInLine = filledInLine + " " + parts[i];
			}
		}
		for (int i = 0; i < parts.length; i++) {
			if (parts[i].equals("<pluverb>")) {
				parts[i]= pluVerbs.get(rnd.nextInt(pluVerbs.size()));
				filledInLine = filledInLine + " " + parts[i];
			}else {
				filledInLine = filledInLine + " " + parts[i];
			}
		}
		for (int i = 0; i < parts.length; i++) {
			if (parts[i].equals("<adj>")) {
				parts[i]= adjs.get(rnd.nextInt(adjs.size()));
				filledInLine = filledInLine + " " + parts[i];
			}else {
				filledInLine = filledInLine + " " + parts[i];
			}
		}
		for (int i = 0; i < parts.length; i++) {
			if (parts[i].equals("<adv>")) {
				parts[i]= advs.get(rnd.nextInt(advs.size()));
				filledInLine = filledInLine + " " + parts[i];
			}else {
				filledInLine = filledInLine + " " + parts[i];
			}
		}
		for (int i = 0; i < parts.length; i++) {
			if (parts[i].equals("<pastverb>")) {
				parts[i]= pastVerbs.get(rnd.nextInt(pastVerbs.size()));
				filledInLine = filledInLine + " " + parts[i];
			}else {
				filledInLine = filledInLine + " " + parts[i];
			}
		}
		finalStory.add(filledInLine);
		System.out.println(filledInLine);
		}
	}
/**
 * this program takes the folder and number that the user picked and grabs the file it needs
 * @param folder that user choose
 * @param storyNum the story that the user wanted to work with
 * @return new ArrayList<String>
 */
	public static ArrayList<String> readStory(String folder, String storyNum){
		ArrayList<String> result = new ArrayList<String>();
		try {
			Scanner fsc = new Scanner (new File(folder, "story" + storyNum + ".txt"));
			while(fsc.hasNextLine()) {
				result.add(fsc.nextLine());
			}
			fsc.close();
			return result;
		}catch(Exception ex) {
			return null; 
		}
}
}

